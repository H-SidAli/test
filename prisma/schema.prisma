generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Role {
    role_id Int           @id @default(autoincrement())
    name    String        @unique @db.VarChar(50)
    users   UserAccount[]

    @@index([name])
}

model UserAccount {
    user_id             Int                   @id @default(autoincrement())
    email               String                @unique @db.VarChar(255)
    passwordHash        String?               @db.VarChar(255)
    googleId            String?               @unique @db.VarChar(255)
    role_id             Int
    createdAt           DateTime              @default(now())
    interventions       Intervention[]        @relation("reported_interventions")
    person              Person?
    role                Role                  @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
    interventionHistory InterventionHistory[]

    @@index([email])
    @@index([googleId])
}

model Person {
    person_id        Int                   @id @default(autoincrement())
    fullName         String                @db.VarChar(255)
    email            String?               @db.VarChar(255)
    phoneNumber      String?               @db.VarChar(20)
    department       String?               @db.VarChar(100)
    userAccountId    Int?                  @unique
    createdAt        DateTime              @default(now())
    updatedAt        DateTime              @updatedAt
    isTechnician     Boolean               @default(false)
    assignedTasks    Intervention[]        @relation("assigned_tasks")
    userAccount      UserAccount?          @relation(fields: [userAccountId], references: [user_id], onDelete: Cascade)
    interventionLogs InterventionHistory[]

    @@index([fullName])
    @@index([email])
}

model Intervention {
    intervention_id Int                   @id @default(autoincrement())
    description     String
    priority        Priority              @default(MEDIUM)
    status          InterventionStatus    @default(PENDING)
    createdAt       DateTime              @default(now())
    resolvedAt      DateTime?
    reportedById    Int
    assignedToId    Int?
    equipment_id    Int
    assignedTo      Person?               @relation("assigned_tasks", fields: [assignedToId], references: [person_id])
    equipment       Equipment             @relation(fields: [equipment_id], references: [equipment_id])
    reportedBy      UserAccount           @relation("reported_interventions", fields: [reportedById], references: [user_id])
    history         InterventionHistory[]

    @@index([status])
    @@index([priority])
    @@index([createdAt])
}

model Equipment {
    equipment_id    Int             @id @default(autoincrement())
    inventory_code  String          @unique @db.VarChar(50)
    designation     String          @db.VarChar(255)
    status          EquipmentStatus @default(IN_SERVICE)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime?       @updatedAt
    acquisitionDate DateTime?       @map("acquisition_date")
    commissionDate  DateTime?       @map("commission_date")
    typeId          Int             @map("type_id")
    type            EquipmentType?  @relation(fields: [typeId], references: [id])
    interventions   Intervention[]

    @@index([inventory_code])
    @@index([status])
}

model EquipmentType {
    id        Int         @id @default(autoincrement()) @map("type_id")
    name      String      @unique @map("type_name") @db.VarChar(255)
    category  String      @db.VarChar(255)
    equipment Equipment[]

    @@map("equipment_types")
}

model InterventionHistory {
    id             Int          @id @default(autoincrement()) @map("history_id")
    interventionId Int          @map("intervention_id")
    action         String
    partsUsed      String?      @map("parts_used")
    notes          String?
    loggedAt       DateTime     @default(now()) @map("logged_at")
    loggedById     Int          @map("logged_by_id")
    userAccountId  Int?         @map("user_account_id")
    intervention   Intervention @relation(fields: [interventionId], references: [intervention_id])
    loggedBy       Person       @relation(fields: [loggedById], references: [person_id])
    userAccount    UserAccount? @relation(fields: [userAccountId], references: [user_id])

    @@map("intervention_history")
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

enum InterventionStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}

enum EquipmentStatus {
    IN_SERVICE
    OUT_OF_SERVICE
    UNDER_MAINTENANCE
}
